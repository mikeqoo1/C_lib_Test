language: c

env:
  global:
    - LIBUV_PREFIX=$HOME/prebuilt/libuv-1.22.0 ;
    - LIBUV_VERSION=1.22.0
    - CMAKE_PREFIX=$HOME/prebuilt/cmake ;
    - CMAKE_LINUX_URL=https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.sh ;
matrix:
  include:
    - os: linux
      dist: cosmic
      sudo: required
      env: USE_CC=gcc USE_CXX=g++ CMAKE_BIN=$CMAKE_PREFIX/bin/cmake CTEST_BIN=$CMAKE_PREFIX/bin/ctest
    # - os: linux
    #   dist: cosmic
    #   sudo: required
    #   env: USE_CC=gcc-4.9 USE_CXX=g++-4.9 CMAKE_BIN=$CMAKE_PREFIX/bin/cmake CTEST_BIN=$CMAKE_PREFIX/bin/ctest
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - gcc-4.9
    #         - gcc-4.9-multilib
    #         - g++-4.9
    #         - g++-4.9-multilib

before_install:
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y "deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.7 main"; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add - ; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update; fi

install:
    # - if [ "$TRAVIS_OS_NAME" == "linux" ] ; then
      
    #       if [ ! -e "$CMAKE_BIN" ]; then
            
    #         mkdir -p "$CMAKE_PREFIX";
            
    #         curl --insecure -L "$CMAKE_LINUX_URL" -o cmake-linux.sh ;
            
    #         bash cmake-linux.sh --skip-license --prefix=$CMAKE_PREFIX ;
            
    #       fi
          
    #   fi
    - sudo apt-get install libuv1-dev;

# before_script:
#   - REPO_DIR=$PWD;
#   - cd /tmp
#   - if [ ! -e "$MSGPACK_PREFIX/include/msgpack.hpp" ]; then
#         mkdir -p "$MSGPACK_PREFIX" ;
#         wget -c "https://github.com/msgpack/msgpack-c/releases/download/cpp-$MSGPACK_VERSION/msgpack-$MSGPACK_VERSION.tar.gz" -O msgpack-$MSGPACK_VERSION.tar.gz;
#         tar -xvf msgpack-$MSGPACK_VERSION.tar.gz;
#         cp -rf msgpack-$MSGPACK_VERSION/include $MSGPACK_PREFIX/ ;
#         rm -rf msgpack-$MSGPACK_VERSION msgpack-$MSGPACK_VERSION.tar.gz ;
#     fi
#   - if [ ! -e "$LIBUV_PREFIX/include/uv.h" ] || [ ! -e "$LIBUV_PREFIX/lib/libuv.so" ] ; then
#         if [ "$TRAVIS_OS_NAME" == "linux" ] ; then
#           mkdir -p "$LIBUV_PREFIX";
#           wget -c "http://dist.libuv.org/dist/v$LIBUV_VERSION/libuv-v$LIBUV_VERSION.tar.gz" -O libuv-v$LIBUV_VERSION.tar.gz;
#           tar -xvf libuv-v$LIBUV_VERSION.tar.gz;
#           cd libuv-v$LIBUV_VERSION ;
#           ./autogen.sh;
#           ./configure --prefix=$LIBUV_PREFIX --with-pic=yes --enable-shared=yes --enable-static=no;
#           make -j4 install;
#           cd -;
#           rm -rf libuv-v$LIBUV_VERSION libuv-v$LIBUV_VERSION ;
#         fi
#     fi
#   - cd "$REPO_DIR";

# script:
#   - REPO_DIR=$PWD;
#   - mkdir -p $REPO_DIR/build && cd $REPO_DIR/build ;
#   - USE_MSGPACK_ROOT=$MSGPACK_PREFIX ;
#   - if [ "$TRAVIS_OS_NAME" == "linux" ] ; then
#       $CMAKE_BIN .. -DCMAKE_C_COMPILER=$USE_CC -DCMAKE_CXX_COMPILER=$USE_CXX -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON -DLIBUV_ROOT=$LIBUV_PREFIX -DMSGPACK_ROOT=$USE_MSGPACK_ROOT ;
#     else
#       $CMAKE_BIN .. -DCMAKE_C_COMPILER=$USE_CC -DCMAKE_CXX_COMPILER=$USE_CXX -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON -DMSGPACK_ROOT=$USE_MSGPACK_ROOT ;
#     fi
#   # - $CMAKE_BIN .. -DCMAKE_C_COMPILER=$USE_CC -DCMAKE_CXX_COMPILER=$USE_CXX -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON -DLIBUV_ROOT=$LIBUV_PREFIX -DMSGPACK_ROOT=$USE_MSGPACK_ROOT ;
#   - $CMAKE_BIN --build .

# after_success:
#   - $CTEST_BIN . -V

# cache:
#   apt: true
#   ccache: true
#   pip: true
#   directories:
#   - /home/travis/prebuilt



# language: c

# env:
#  - ENV_CC=gcc

script: CC=$USE_CC make all  && make libuvS
